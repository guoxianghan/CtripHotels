//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5420
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// 此源代码由 wsdl 自动生成, Version=2.0.50727.3038。
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IDataBase", Namespace="http://tempuri.org/")]
public class WSDBHelper : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback QueryDataSetOperationCompleted;
    
    private System.Threading.SendOrPostCallback QueryOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetMaxIDOperationCompleted;
    
    private System.Threading.SendOrPostCallback RunDataSetProcedureOperationCompleted;
    
    private System.Threading.SendOrPostCallback ExecuteOperationCompleted;
    
    private System.Threading.SendOrPostCallback ExecuteNonQueryOperationCompleted;
    
    private System.Threading.SendOrPostCallback ExprotTableOperationCompleted;
    
    private System.Threading.SendOrPostCallback ExecuteMulitySqlOperationCompleted;
    
    private System.Threading.SendOrPostCallback ExecuteScalarOperationCompleted;
    
    private System.Threading.SendOrPostCallback ConnectionStringOperationCompleted;
    
    /// <remarks/>
    public WSDBHelper() {
        this.Url = "http://192.168.1.42:8066/DataBaseWebService/DataBase.svc";
    }
    
    /// <remarks/>
    public event QueryDataSetCompletedEventHandler QueryDataSetCompleted;
    
    /// <remarks/>
    public event QueryCompletedEventHandler QueryCompleted;
    
    /// <remarks/>
    public event GetMaxIDCompletedEventHandler GetMaxIDCompleted;
    
    /// <remarks/>
    public event RunDataSetProcedureCompletedEventHandler RunDataSetProcedureCompleted;
    
    /// <remarks/>
    public event ExecuteCompletedEventHandler ExecuteCompleted;
    
    /// <remarks/>
    public event ExecuteNonQueryCompletedEventHandler ExecuteNonQueryCompleted;
    
    /// <remarks/>
    public event ExprotTableCompletedEventHandler ExprotTableCompleted;
    
    /// <remarks/>
    public event ExecuteMulitySqlCompletedEventHandler ExecuteMulitySqlCompleted;
    
    /// <remarks/>
    public event ExecuteScalarCompletedEventHandler ExecuteScalarCompleted;
    
    /// <remarks/>
    public event ConnectionStringCompletedEventHandler ConnectionStringCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDataBase/QueryDataSet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Data.DataSet QueryDataSet([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sql, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string err) {
        object[] results = this.Invoke("QueryDataSet", new object[] {
                    sql});
        err = ((string)(results[1]));
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginQueryDataSet(string sql, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("QueryDataSet", new object[] {
                    sql}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataSet EndQueryDataSet(System.IAsyncResult asyncResult, out string err) {
        object[] results = this.EndInvoke(asyncResult);
        err = ((string)(results[1]));
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void QueryDataSetAsync(string sql) {
        this.QueryDataSetAsync(sql, null);
    }
    
    /// <remarks/>
    public void QueryDataSetAsync(string sql, object userState) {
        if ((this.QueryDataSetOperationCompleted == null)) {
            this.QueryDataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryDataSetOperationCompleted);
        }
        this.InvokeAsync("QueryDataSet", new object[] {
                    sql}, this.QueryDataSetOperationCompleted, userState);
    }
    
    private void OnQueryDataSetOperationCompleted(object arg) {
        if ((this.QueryDataSetCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.QueryDataSetCompleted(this, new QueryDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDataBase/Query", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Data.DataTable Query([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sql, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string err) {
        object[] results = this.Invoke("Query", new object[] {
                    sql});
        err = ((string)(results[1]));
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginQuery(string sql, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Query", new object[] {
                    sql}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataTable EndQuery(System.IAsyncResult asyncResult, out string err) {
        object[] results = this.EndInvoke(asyncResult);
        err = ((string)(results[1]));
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public void QueryAsync(string sql) {
        this.QueryAsync(sql, null);
    }
    
    /// <remarks/>
    public void QueryAsync(string sql, object userState) {
        if ((this.QueryOperationCompleted == null)) {
            this.QueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryOperationCompleted);
        }
        this.InvokeAsync("Query", new object[] {
                    sql}, this.QueryOperationCompleted, userState);
    }
    
    private void OnQueryOperationCompleted(object arg) {
        if ((this.QueryCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.QueryCompleted(this, new QueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDataBase/GetMaxID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void GetMaxID([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string column, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string tablename, out int GetMaxIDResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool GetMaxIDResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string err) {
        object[] results = this.Invoke("GetMaxID", new object[] {
                    column,
                    tablename});
        GetMaxIDResult = ((int)(results[0]));
        GetMaxIDResultSpecified = ((bool)(results[1]));
        err = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetMaxID(string column, string tablename, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetMaxID", new object[] {
                    column,
                    tablename}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetMaxID(System.IAsyncResult asyncResult, out int GetMaxIDResult, out bool GetMaxIDResultSpecified, out string err) {
        object[] results = this.EndInvoke(asyncResult);
        GetMaxIDResult = ((int)(results[0]));
        GetMaxIDResultSpecified = ((bool)(results[1]));
        err = ((string)(results[2]));
    }
    
    /// <remarks/>
    public void GetMaxIDAsync(string column, string tablename) {
        this.GetMaxIDAsync(column, tablename, null);
    }
    
    /// <remarks/>
    public void GetMaxIDAsync(string column, string tablename, object userState) {
        if ((this.GetMaxIDOperationCompleted == null)) {
            this.GetMaxIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMaxIDOperationCompleted);
        }
        this.InvokeAsync("GetMaxID", new object[] {
                    column,
                    tablename}, this.GetMaxIDOperationCompleted, userState);
    }
    
    private void OnGetMaxIDOperationCompleted(object arg) {
        if ((this.GetMaxIDCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetMaxIDCompleted(this, new GetMaxIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDataBase/RunDataSetProcedure", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Data.DataSet RunDataSetProcedure([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string procname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string err) {
        object[] results = this.Invoke("RunDataSetProcedure", new object[] {
                    procname});
        err = ((string)(results[1]));
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRunDataSetProcedure(string procname, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RunDataSetProcedure", new object[] {
                    procname}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataSet EndRunDataSetProcedure(System.IAsyncResult asyncResult, out string err) {
        object[] results = this.EndInvoke(asyncResult);
        err = ((string)(results[1]));
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void RunDataSetProcedureAsync(string procname) {
        this.RunDataSetProcedureAsync(procname, null);
    }
    
    /// <remarks/>
    public void RunDataSetProcedureAsync(string procname, object userState) {
        if ((this.RunDataSetProcedureOperationCompleted == null)) {
            this.RunDataSetProcedureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunDataSetProcedureOperationCompleted);
        }
        this.InvokeAsync("RunDataSetProcedure", new object[] {
                    procname}, this.RunDataSetProcedureOperationCompleted, userState);
    }
    
    private void OnRunDataSetProcedureOperationCompleted(object arg) {
        if ((this.RunDataSetProcedureCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RunDataSetProcedureCompleted(this, new RunDataSetProcedureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDataBase/Execute", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void Execute([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sqlString, out int ExecuteResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ExecuteResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string errinfo) {
        object[] results = this.Invoke("Execute", new object[] {
                    sqlString});
        ExecuteResult = ((int)(results[0]));
        ExecuteResultSpecified = ((bool)(results[1]));
        errinfo = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginExecute(string sqlString, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Execute", new object[] {
                    sqlString}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndExecute(System.IAsyncResult asyncResult, out int ExecuteResult, out bool ExecuteResultSpecified, out string errinfo) {
        object[] results = this.EndInvoke(asyncResult);
        ExecuteResult = ((int)(results[0]));
        ExecuteResultSpecified = ((bool)(results[1]));
        errinfo = ((string)(results[2]));
    }
    
    /// <remarks/>
    public void ExecuteAsync(string sqlString) {
        this.ExecuteAsync(sqlString, null);
    }
    
    /// <remarks/>
    public void ExecuteAsync(string sqlString, object userState) {
        if ((this.ExecuteOperationCompleted == null)) {
            this.ExecuteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteOperationCompleted);
        }
        this.InvokeAsync("Execute", new object[] {
                    sqlString}, this.ExecuteOperationCompleted, userState);
    }
    
    private void OnExecuteOperationCompleted(object arg) {
        if ((this.ExecuteCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ExecuteCompleted(this, new ExecuteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDataBase/ExecuteNonQuery", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void ExecuteNonQuery([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sqlString, out int ExecuteNonQueryResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ExecuteNonQueryResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string errinfo) {
        object[] results = this.Invoke("ExecuteNonQuery", new object[] {
                    sqlString});
        ExecuteNonQueryResult = ((int)(results[0]));
        ExecuteNonQueryResultSpecified = ((bool)(results[1]));
        errinfo = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginExecuteNonQuery(string sqlString, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ExecuteNonQuery", new object[] {
                    sqlString}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndExecuteNonQuery(System.IAsyncResult asyncResult, out int ExecuteNonQueryResult, out bool ExecuteNonQueryResultSpecified, out string errinfo) {
        object[] results = this.EndInvoke(asyncResult);
        ExecuteNonQueryResult = ((int)(results[0]));
        ExecuteNonQueryResultSpecified = ((bool)(results[1]));
        errinfo = ((string)(results[2]));
    }
    
    /// <remarks/>
    public void ExecuteNonQueryAsync(string sqlString) {
        this.ExecuteNonQueryAsync(sqlString, null);
    }
    
    /// <remarks/>
    public void ExecuteNonQueryAsync(string sqlString, object userState) {
        if ((this.ExecuteNonQueryOperationCompleted == null)) {
            this.ExecuteNonQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteNonQueryOperationCompleted);
        }
        this.InvokeAsync("ExecuteNonQuery", new object[] {
                    sqlString}, this.ExecuteNonQueryOperationCompleted, userState);
    }
    
    private void OnExecuteNonQueryOperationCompleted(object arg) {
        if ((this.ExecuteNonQueryCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ExecuteNonQueryCompleted(this, new ExecuteNonQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDataBase/ExprotTable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void ExprotTable([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strsql, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Data.DataTable dt, out bool ExprotTableResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ExprotTableResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string errinfo) {
        object[] results = this.Invoke("ExprotTable", new object[] {
                    strsql,
                    dt});
        ExprotTableResult = ((bool)(results[0]));
        ExprotTableResultSpecified = ((bool)(results[1]));
        errinfo = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginExprotTable(string strsql, System.Data.DataTable dt, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ExprotTable", new object[] {
                    strsql,
                    dt}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndExprotTable(System.IAsyncResult asyncResult, out bool ExprotTableResult, out bool ExprotTableResultSpecified, out string errinfo) {
        object[] results = this.EndInvoke(asyncResult);
        ExprotTableResult = ((bool)(results[0]));
        ExprotTableResultSpecified = ((bool)(results[1]));
        errinfo = ((string)(results[2]));
    }
    
    /// <remarks/>
    public void ExprotTableAsync(string strsql, System.Data.DataTable dt) {
        this.ExprotTableAsync(strsql, dt, null);
    }
    
    /// <remarks/>
    public void ExprotTableAsync(string strsql, System.Data.DataTable dt, object userState) {
        if ((this.ExprotTableOperationCompleted == null)) {
            this.ExprotTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExprotTableOperationCompleted);
        }
        this.InvokeAsync("ExprotTable", new object[] {
                    strsql,
                    dt}, this.ExprotTableOperationCompleted, userState);
    }
    
    private void OnExprotTableOperationCompleted(object arg) {
        if ((this.ExprotTableCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ExprotTableCompleted(this, new ExprotTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDataBase/ExecuteMulitySql", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void ExecuteMulitySql([System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] sqlStringList, out bool ExecuteMulitySqlResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ExecuteMulitySqlResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string errinfo) {
        object[] results = this.Invoke("ExecuteMulitySql", new object[] {
                    sqlStringList});
        ExecuteMulitySqlResult = ((bool)(results[0]));
        ExecuteMulitySqlResultSpecified = ((bool)(results[1]));
        errinfo = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginExecuteMulitySql(string[] sqlStringList, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ExecuteMulitySql", new object[] {
                    sqlStringList}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndExecuteMulitySql(System.IAsyncResult asyncResult, out bool ExecuteMulitySqlResult, out bool ExecuteMulitySqlResultSpecified, out string errinfo) {
        object[] results = this.EndInvoke(asyncResult);
        ExecuteMulitySqlResult = ((bool)(results[0]));
        ExecuteMulitySqlResultSpecified = ((bool)(results[1]));
        errinfo = ((string)(results[2]));
    }
    
    /// <remarks/>
    public void ExecuteMulitySqlAsync(string[] sqlStringList) {
        this.ExecuteMulitySqlAsync(sqlStringList, null);
    }
    
    /// <remarks/>
    public void ExecuteMulitySqlAsync(string[] sqlStringList, object userState) {
        if ((this.ExecuteMulitySqlOperationCompleted == null)) {
            this.ExecuteMulitySqlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteMulitySqlOperationCompleted);
        }
        this.InvokeAsync("ExecuteMulitySql", new object[] {
                    sqlStringList}, this.ExecuteMulitySqlOperationCompleted, userState);
    }
    
    private void OnExecuteMulitySqlOperationCompleted(object arg) {
        if ((this.ExecuteMulitySqlCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ExecuteMulitySqlCompleted(this, new ExecuteMulitySqlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDataBase/ExecuteScalar", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public object ExecuteScalar([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sqlString, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string errinfo) {
        object[] results = this.Invoke("ExecuteScalar", new object[] {
                    sqlString});
        errinfo = ((string)(results[1]));
        return ((object)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginExecuteScalar(string sqlString, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ExecuteScalar", new object[] {
                    sqlString}, callback, asyncState);
    }
    
    /// <remarks/>
    public object EndExecuteScalar(System.IAsyncResult asyncResult, out string errinfo) {
        object[] results = this.EndInvoke(asyncResult);
        errinfo = ((string)(results[1]));
        return ((object)(results[0]));
    }
    
    /// <remarks/>
    public void ExecuteScalarAsync(string sqlString) {
        this.ExecuteScalarAsync(sqlString, null);
    }
    
    /// <remarks/>
    public void ExecuteScalarAsync(string sqlString, object userState) {
        if ((this.ExecuteScalarOperationCompleted == null)) {
            this.ExecuteScalarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteScalarOperationCompleted);
        }
        this.InvokeAsync("ExecuteScalar", new object[] {
                    sqlString}, this.ExecuteScalarOperationCompleted, userState);
    }
    
    private void OnExecuteScalarOperationCompleted(object arg) {
        if ((this.ExecuteScalarCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ExecuteScalarCompleted(this, new ExecuteScalarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDataBase/ConnectionString", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public string ConnectionString() {
        object[] results = this.Invoke("ConnectionString", new object[0]);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginConnectionString(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ConnectionString", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public string EndConnectionString(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void ConnectionStringAsync() {
        this.ConnectionStringAsync(null);
    }
    
    /// <remarks/>
    public void ConnectionStringAsync(object userState) {
        if ((this.ConnectionStringOperationCompleted == null)) {
            this.ConnectionStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnectionStringOperationCompleted);
        }
        this.InvokeAsync("ConnectionString", new object[0], this.ConnectionStringOperationCompleted, userState);
    }
    
    private void OnConnectionStringOperationCompleted(object arg) {
        if ((this.ConnectionStringCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ConnectionStringCompleted(this, new ConnectionStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void QueryDataSetCompletedEventHandler(object sender, QueryDataSetCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class QueryDataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal QueryDataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string err {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void QueryCompletedEventHandler(object sender, QueryCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class QueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal QueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataTable Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataTable)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string err {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void GetMaxIDCompletedEventHandler(object sender, GetMaxIDCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetMaxIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetMaxIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public int GetMaxIDResult {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool GetMaxIDResultSpecified {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public string err {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[2]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void RunDataSetProcedureCompletedEventHandler(object sender, RunDataSetProcedureCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RunDataSetProcedureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RunDataSetProcedureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string err {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void ExecuteCompletedEventHandler(object sender, ExecuteCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ExecuteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ExecuteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public int ExecuteResult {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool ExecuteResultSpecified {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public string errinfo {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[2]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void ExecuteNonQueryCompletedEventHandler(object sender, ExecuteNonQueryCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ExecuteNonQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ExecuteNonQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public int ExecuteNonQueryResult {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool ExecuteNonQueryResultSpecified {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public string errinfo {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[2]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void ExprotTableCompletedEventHandler(object sender, ExprotTableCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ExprotTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ExprotTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool ExprotTableResult {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool ExprotTableResultSpecified {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public string errinfo {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[2]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void ExecuteMulitySqlCompletedEventHandler(object sender, ExecuteMulitySqlCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ExecuteMulitySqlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ExecuteMulitySqlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool ExecuteMulitySqlResult {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool ExecuteMulitySqlResultSpecified {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public string errinfo {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[2]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void ExecuteScalarCompletedEventHandler(object sender, ExecuteScalarCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ExecuteScalarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ExecuteScalarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public object Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((object)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string errinfo {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void ConnectionStringCompletedEventHandler(object sender, ConnectionStringCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ConnectionStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ConnectionStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}
